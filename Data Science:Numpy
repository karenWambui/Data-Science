{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/karenmwaura/data-science-numpy?scriptVersionId=209835820\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\n#import numpy as np # linear algebra\n#import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#import os\n#for dirname, _, filenames in os.walk('/kaggle/input'):\n    #for filename in filenames:\n        #print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"!pip install numpy","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-22T03:09:29.368192Z","iopub.execute_input":"2024-11-22T03:09:29.36859Z","iopub.status.idle":"2024-11-22T03:09:41.607686Z","shell.execute_reply.started":"2024-11-22T03:09:29.368553Z","shell.execute_reply":"2024-11-22T03:09:41.606291Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (1.26.4)\n","output_type":"stream"}],"execution_count":2},{"cell_type":"markdown","source":"1D Array","metadata":{}},{"cell_type":"code","source":"import numpy as np\narr = np.array([1,2,3,4,5])\nprint(arr)\ntype(arr)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-26T02:28:40.112164Z","iopub.execute_input":"2024-11-26T02:28:40.113048Z","iopub.status.idle":"2024-11-26T02:28:40.123141Z","shell.execute_reply.started":"2024-11-26T02:28:40.113011Z","shell.execute_reply":"2024-11-26T02:28:40.121864Z"}},"outputs":[{"name":"stdout","text":"[1 2 3 4 5]\n","output_type":"stream"},{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"numpy.ndarray"},"metadata":{}}],"execution_count":2},{"cell_type":"markdown","source":"2D Array","metadata":{}},{"cell_type":"code","source":"\nimport numpy as np\narr = np.array([42,44,56,879]),([42,44,56,879])\nprint(arr)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-26T02:40:01.539165Z","iopub.execute_input":"2024-11-26T02:40:01.539585Z","iopub.status.idle":"2024-11-26T02:40:01.546399Z","shell.execute_reply.started":"2024-11-26T02:40:01.539546Z","shell.execute_reply":"2024-11-26T02:40:01.54508Z"}},"outputs":[{"name":"stdout","text":"(array([ 42,  44,  56, 879]), [42, 44, 56, 879])\n","output_type":"stream"}],"execution_count":5},{"cell_type":"markdown","source":"3D Array","metadata":{}},{"cell_type":"code","source":"import numpy as np\nd = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 13]]])\nprint(d)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-26T02:58:03.290848Z","iopub.execute_input":"2024-11-26T02:58:03.291268Z","iopub.status.idle":"2024-11-26T02:58:03.298063Z","shell.execute_reply.started":"2024-11-26T02:58:03.291232Z","shell.execute_reply":"2024-11-26T02:58:03.296673Z"}},"outputs":[{"name":"stdout","text":"[[[ 1  2  3]\n  [ 4  5  6]]\n\n [[ 7  8  9]\n  [10 11 13]]]\n","output_type":"stream"}],"execution_count":12},{"cell_type":"markdown","source":"Reshapping","metadata":{}},{"cell_type":"code","source":"\nimport numpy as np\narr = np.array([42,44,56,879,42,44,56,879])\nnewarr = arr.reshape(4,2)\nprint(newarr)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-26T02:54:28.846066Z","iopub.execute_input":"2024-11-26T02:54:28.84645Z","iopub.status.idle":"2024-11-26T02:54:28.853084Z","shell.execute_reply.started":"2024-11-26T02:54:28.846417Z","shell.execute_reply":"2024-11-26T02:54:28.851598Z"}},"outputs":[{"name":"stdout","text":"[[ 42  44]\n [ 56 879]\n [ 42  44]\n [ 56 879]]\n","output_type":"stream"}],"execution_count":11},{"cell_type":"markdown","source":"Flattening the arrays****","metadata":{}},{"cell_type":"code","source":"\n#Converting multidimensional arrau into 1d array\nimport numpy as np\narr = np.array([[42,44],[56,879]])\nnewark = arr.reshape(-1)\nprint(newarr)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-26T03:00:26.884984Z","iopub.execute_input":"2024-11-26T03:00:26.88534Z","iopub.status.idle":"2024-11-26T03:00:26.891629Z","shell.execute_reply.started":"2024-11-26T03:00:26.88531Z","shell.execute_reply":"2024-11-26T03:00:26.890395Z"}},"outputs":[{"name":"stdout","text":"[[ 42  44]\n [ 56 879]\n [ 42  44]\n [ 56 879]]\n","output_type":"stream"}],"execution_count":17},{"cell_type":"markdown","source":"**Accessing Arrays******\nGetting the first value","metadata":{}},{"cell_type":"code","source":"import numpy as np\narr = np.array([42,44,56,879,42,44,56,879])\n\nprint(newarr[0])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-26T03:02:43.05908Z","iopub.execute_input":"2024-11-26T03:02:43.059461Z","iopub.status.idle":"2024-11-26T03:02:43.065614Z","shell.execute_reply.started":"2024-11-26T03:02:43.059428Z","shell.execute_reply":"2024-11-26T03:02:43.064321Z"}},"outputs":[{"name":"stdout","text":"[42 44]\n","output_type":"stream"}],"execution_count":18},{"cell_type":"markdown","source":"Acessing the third and fourth elements ","metadata":{}},{"cell_type":"code","source":"import numpy as np\narr = np.array([42,44,56,879,42,44,56,879])\nprint(newarr[2]+newarr[3])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-26T03:04:18.917891Z","iopub.execute_input":"2024-11-26T03:04:18.918275Z","iopub.status.idle":"2024-11-26T03:04:18.926642Z","shell.execute_reply.started":"2024-11-26T03:04:18.918242Z","shell.execute_reply":"2024-11-26T03:04:18.9254Z"}},"outputs":[{"name":"stdout","text":"[ 98 923]\n","output_type":"stream"}],"execution_count":19},{"cell_type":"code","source":"Access the element on the first row,second column","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\narr = np.array([[42,44,56,879,988],[42,44,56,879,900]])\nprint('2nd element on 1st row:',arr[0,1])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-26T03:09:39.311231Z","iopub.execute_input":"2024-11-26T03:09:39.311677Z","iopub.status.idle":"2024-11-26T03:09:39.318003Z","shell.execute_reply.started":"2024-11-26T03:09:39.311638Z","shell.execute_reply":"2024-11-26T03:09:39.31685Z"}},"outputs":[{"name":"stdout","text":"2nd element on 1st row: 44\n","output_type":"stream"}],"execution_count":24},{"cell_type":"markdown","source":"**Iterating Arrays**\nIterating means going through elements one by one.\nFor multidemensional arrays.We use for loops\n","metadata":{}},{"cell_type":"code","source":"import numpy as np\narr = np.array([42,44,56])\nfor x in arr:\n    print(x)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-26T03:15:23.198319Z","iopub.execute_input":"2024-11-26T03:15:23.198717Z","iopub.status.idle":"2024-11-26T03:15:23.204804Z","shell.execute_reply.started":"2024-11-26T03:15:23.198682Z","shell.execute_reply":"2024-11-26T03:15:23.203472Z"}},"outputs":[{"name":"stdout","text":"42\n44\n56\n","output_type":"stream"}],"execution_count":25},{"cell_type":"markdown","source":"Iterate on each scalar element","metadata":{}},{"cell_type":"code","source":"import numpy as np\narr = np.array([[42,44,56],[38,90,39]])\nfor x in arr:\n    for y in x:\n      print(y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-26T03:19:02.735356Z","iopub.execute_input":"2024-11-26T03:19:02.735756Z","iopub.status.idle":"2024-11-26T03:19:02.742197Z","shell.execute_reply.started":"2024-11-26T03:19:02.735714Z","shell.execute_reply":"2024-11-26T03:19:02.740733Z"}},"outputs":[{"name":"stdout","text":"42\n44\n56\n38\n90\n39\n","output_type":"stream"}],"execution_count":29},{"cell_type":"markdown","source":"Array Slicing","metadata":{}},{"cell_type":"markdown","source":"Slicing in python means takinf elements from one given index to another given index\n\nWe pass slice instead of index like this start:end]\nWe can also define the step like this: [start:end:start]\nIf we don't pass start its considered 0\nIf we don't pass end its considered length of array in that dimension(prints the entire array)\nIf we don't pass any step its considered 1\nElements present at the end position will not be printed","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"import numpy as np\narr = np.array([1,2,3,4,5,6,7])\nprint(arr[1:5:2])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T02:26:02.051352Z","iopub.execute_input":"2024-11-27T02:26:02.052259Z","iopub.status.idle":"2024-11-27T02:26:02.058165Z","shell.execute_reply.started":"2024-11-27T02:26:02.052219Z","shell.execute_reply":"2024-11-27T02:26:02.057014Z"}},"outputs":[{"name":"stdout","text":"[2 4]\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"import numpy as np\narr = np.array([[1,2,3,4,5],[6,7,8,9,10]])\nprint(arr[1,1:4])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T02:27:57.928922Z","iopub.execute_input":"2024-11-27T02:27:57.929338Z","iopub.status.idle":"2024-11-27T02:27:57.936569Z","shell.execute_reply.started":"2024-11-27T02:27:57.9293Z","shell.execute_reply":"2024-11-27T02:27:57.93562Z"}},"outputs":[{"name":"stdout","text":"[7 8 9]\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"import numpy as np\narr = np.array([1,2,3,4,5,6,7])\nprint(arr[4:])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T02:31:28.006991Z","iopub.execute_input":"2024-11-27T02:31:28.007405Z","iopub.status.idle":"2024-11-27T02:31:28.013978Z","shell.execute_reply.started":"2024-11-27T02:31:28.007367Z","shell.execute_reply":"2024-11-27T02:31:28.012818Z"}},"outputs":[{"name":"stdout","text":"[5 6 7]\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"import numpy as np\narr = np.array([1,2,3,4,5,6,7])\nprint(arr[:4])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T02:31:54.030715Z","iopub.execute_input":"2024-11-27T02:31:54.031074Z","iopub.status.idle":"2024-11-27T02:31:54.037053Z","shell.execute_reply.started":"2024-11-27T02:31:54.031043Z","shell.execute_reply":"2024-11-27T02:31:54.03597Z"}},"outputs":[{"name":"stdout","text":"[1 2 3 4]\n","output_type":"stream"}],"execution_count":7},{"cell_type":"markdown","source":"Searching & Sorting Arrays\nYou can search and array,use where () method ","metadata":{}},{"cell_type":"code","source":"import numpy as np\narr = np.array([1,2,3,4,5,4,4])\nx=np.where(arr== 4)\nprint(x)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T02:37:48.081855Z","iopub.execute_input":"2024-11-27T02:37:48.08246Z","iopub.status.idle":"2024-11-27T02:37:48.088943Z","shell.execute_reply.started":"2024-11-27T02:37:48.082357Z","shell.execute_reply":"2024-11-27T02:37:48.08788Z"}},"outputs":[{"name":"stdout","text":"(array([3, 5, 6]),)\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"import numpy as np\na = np.array([1,2,3,4,5,6,7,8])\nx = np.where( a==7)\nprint(x)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T02:46:30.759611Z","iopub.execute_input":"2024-11-27T02:46:30.760685Z","iopub.status.idle":"2024-11-27T02:46:30.766205Z","shell.execute_reply.started":"2024-11-27T02:46:30.760644Z","shell.execute_reply":"2024-11-27T02:46:30.765022Z"}},"outputs":[{"name":"stdout","text":"(array([6]),)\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"#Find indexex where the values are even\nimport numpy as np\narr = np.array([1,2,3,4,5,6,7,8])\nx = np.where(arr%2 ==0)\nprint(x)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T02:39:56.615398Z","iopub.execute_input":"2024-11-27T02:39:56.615758Z","iopub.status.idle":"2024-11-27T02:39:56.621913Z","shell.execute_reply.started":"2024-11-27T02:39:56.615725Z","shell.execute_reply":"2024-11-27T02:39:56.620846Z"}},"outputs":[{"name":"stdout","text":"(array([1, 3, 5, 7]),)\n","output_type":"stream"}],"execution_count":10},{"cell_type":"markdown","source":"Sorting Arrays \nThis means putting elements in an ordered sequence\nOrdered sequence is any sequence that has an order correponding to elements ,like numeric or alphabetical,asc or desc.\nThe Numpy ndarray object has a function called sort() that will sort a specified array.","metadata":{}},{"cell_type":"code","source":"import numpy as np\narr = np.array(['banana','cherry','apple'])\nprint(np.sort(arr))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T02:44:56.29804Z","iopub.execute_input":"2024-11-27T02:44:56.298431Z","iopub.status.idle":"2024-11-27T02:44:56.304504Z","shell.execute_reply.started":"2024-11-27T02:44:56.298399Z","shell.execute_reply":"2024-11-27T02:44:56.303365Z"}},"outputs":[{"name":"stdout","text":"['apple' 'banana' 'cherry']\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"import numpy as np\narr = np.array([1,8,6,9,3,4,2])\nprint(np.sort(arr))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T02:45:32.30572Z","iopub.execute_input":"2024-11-27T02:45:32.306133Z","iopub.status.idle":"2024-11-27T02:45:32.312853Z","shell.execute_reply.started":"2024-11-27T02:45:32.306097Z","shell.execute_reply":"2024-11-27T02:45:32.311574Z"}},"outputs":[{"name":"stdout","text":"[1 2 3 4 6 8 9]\n","output_type":"stream"}],"execution_count":12}]}